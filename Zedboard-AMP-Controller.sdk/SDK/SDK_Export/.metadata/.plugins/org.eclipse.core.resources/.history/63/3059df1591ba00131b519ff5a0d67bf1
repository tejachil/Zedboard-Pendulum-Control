/*
 * File:   		main.c
 * Author: 		Teja Chiluvuri
 * Description: Source code for controlling inverted pendulum
 * 				Extended Vivek's code to incorporate the FreeRTOS framework
 * Date:		September 21, 2013
*/

/*************************** Header Files ***************************/
#include "FreeRTOS.h"
#include "task.h"
#include "queue.h"
#include "semphr.h"
#include "timers.h"

#include "AXI_SPI.h"
#include "adc_dac.h"
#include "encoder.h"
#include "sleep.h"
#include "xil_printf.h"

#include "AXI_GPIO.h"
#include "amp.h"


#define mainLED_TASK_PRIORITY		( tskIDLE_PRIORITY + 1 )

// Used to toggle the LEDs on ZedBoard to measure timer period and SPI send latency
#define LED_DEBUG 1
#if LED_DEBUG == 1
	XGpio GPIOInstance_Ptr;
	void prvSetLEDHardware( void );
	// Function prototype for the printing task
	static void printingTask(void *param);
#endif

SpiStruct mySpi;

#define STATE_FEEDBACK		0
#define KALMAN_FILTER		1
#define SWING_UP			2

#define CONTROLLER_MODE		STATE_FEEDBACK


static int printed; // variable to keep track of printing

/*************************** Function Prototypes ***************************/
void update_value(xTimerHandle pxTimer);



/*************************** main() ***************************/
int main(void)
{
	prvInitializeExceptions();


	//*** NEW METHOD ****************
	MyXil_SetTlbAttributes(0xFFFF0000,0x04de2);           // S=b0 TEX=b100 AP=b11, Domain=b1111, C=b0, B=b0
	xil_printf("Starting FreeRTOS on CPU1...\n");


	#if LED_DEBUG == 1
	prvSetLEDHardware();
	//setupDebugLatancyLED(&mio_emio_pmod2, LD6);
	printed = 0;
	xTaskCreate(printingTask, (signed char*) "Printing Task", configMINIMAL_STACK_SIZE,(void *) NULL, (tskIDLE_PRIORITY + 1), ( xTaskHandle * ) NULL );
	#endif

	// Start the SPI monitor task
	//SpiStruct mySpi;
	startSpiTask(&mySpi);

	// Write 0 to the motors and initialize the encoder
	writeDAC(0);
    theta_des=0.;
    initEncoder(ENCODER_P);
    initEncoder(ENCODER_S);


    // Start a timer with a period of 1ms
	xTimerHandle ControllerTimerHandle = xTimerCreate((const signed char *)"Controller Timer",(1/portTICK_RATE_MS),pdTRUE,(void *) NULL,update_value);
	xTimerStart(ControllerTimerHandle, 0);

	/* Start the tasks and timer running. */
	vTaskStartScheduler();

	/* If all is well, the scheduler will now be running, and the following line
	will never be reached.  If the following line does execute, then there was
	insufficient FreeRTOS heap memory available for the idle and/or timer tasks
	to be created.  See the memory management section on the FreeRTOS web site
	for more details. */
	for( ;; );
}


#if LED_DEBUG == 1

static void printingTask( void *param ){
	for(;;){
		if(printed){
			#if LED_DEBUG == 1
			setLEDs(&GPIOInstance_Ptr, LED_5, 1);
			#endif
			xil_printf("\n%d %d", enc1, enc2); // print time: encoder value, control input
		}
		#if LED_DEBUG == 1
		setLEDs(&GPIOInstance_Ptr, LED_5, 0);
		#endif
		taskYIELD();
	}
}

void prvSetLEDHardware( void )
{
	if(initLEDs(&GPIOInstance_Ptr) != XST_SUCCESS){
		xil_printf("Failed to initialize AXI GPIO\n");
	}
}
#endif


/*-----------------------------------------------------------*/
void vApplicationMallocFailedHook( void )
{
	/* vApplicationMallocFailedHook() will only be called if
	configUSE_MALLOC_FAILED_HOOK is set to 1 in FreeRTOSConfig.h.  It is a hook
	function that will get called if a call to pvPortMalloc() fails.
	pvPortMalloc() is called internally by the kernel whenever a task, queue or
	semaphore is created.  It is also called by various parts of the demo
	application.  If heap_1.c or heap_2.c are used, then the size of the heap
	available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
	for( ;; );
}

/*-----------------------------------------------------------*/
void vApplicationStackOverflowHook( xTaskHandle *pxTask, signed char *pcTaskName )
{
	( void ) pcTaskName;
	( void ) pxTask;

	/* vApplicationStackOverflowHook() will only be called if
	configCHECK_FOR_STACK_OVERFLOW is set to either 1 or 2.  The handle and name
	of the offending task will be passed into the hook function via its
	parameters.  However, when a stack has overflowed, it is possible that the
	parameters will have been corrupted, in which case the pxCurrentTCB variable
	can be inspected directly. */
	taskDISABLE_INTERRUPTS();
	for( ;; );
}

void vApplicationSetupHardware( void )
{
	/* Do nothing */
}
