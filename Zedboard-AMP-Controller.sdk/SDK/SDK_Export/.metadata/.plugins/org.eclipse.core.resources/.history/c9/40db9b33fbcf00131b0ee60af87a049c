/*
 * PlantControl.c
 *
 *  Created on: Apr 15, 2014
 *      Author: chris
 */


#include "PlantControl.h"
#include "FreeRTOS.h"
#include "timers.h"
#include "math.h"
#include "adc_dac.h"
#include "encoder.h"
#include "RemoteProcPrint.h"
#include "AXI_GPIO.h"


/********************** Global variables for controller **********************/

volatile unsigned sec1000; // This is updated 1000 times per second by interrupt handler
volatile float output_V,theta_R,alpha_R,theta_des;
volatile float thetaDot=0.,alphaDot=0.;
static int printed;
const float Kr2d=180./pi;        //radians to degrees
const float Kpot=-352.*pi/180/10;    //radians/V for pot
const float Kenc=pi/(2.*1024.);     //radians/count for encoder

float u = 0,u1,u2;
volatile float E; // Energy of the pendulum E = (1/2)Jp*alphadort^2 + (1-cos(alpha))*)1/2*mp*Lp*g)

static int k=1; // added for sign of alphadot*cos(alpha) for swing up control
static float thetaOld=0.,alphaOld=0.;

int temp,ind,i,col;
static int enc1, enc2, enc1_start;
volatile float enc1_pr, enc2_pr;
volatile float theta_R_p;
//static float pot1;

float xhat[4];
/*static const float Kf[4][2]={
	{0.9785,0},
	{0,0.9785},
	{0.0109,-0.0251},
	{-0.0278,0.9473}
};*///original
/*static const float Kf[4][2]={
	{0.8527,0},
	{0,0.8529},
	{0.0094,-0.0092},
	{-0.0243,0.8448}
};*///small modification to measurement noise
static const float Kf[4][2]={
	{0.9898,0},
	{0,0.9611},
	{0.0027,-0.0201},
	{-0.0062,0.7778}
};//modification to process noise

static const float Kc[4]={-5.1688,27.7667,-2.7224,3.1787};
/*static const float Aup[4][4]={
    {0.0215,0.000,0.0000,0.0000},
    {0.0000,0.0215,0.0000,0.0000},
    {-0.0109,0.1239,0.9443,-0.0010},
    {0.0278,-0.7977,-0.0535,0.9972}
};*/
/*static const float Aup[4][4]={
    {0.1473,0.000,0.0002,0.0000},
    {0.0000,0.1471,0.0000,0.0002},
    {-0.0094,0.1080,0.9443,-0.0011},
    {0.0243,-0.6952,-0.0535,0.9973}
};*/

static const float Aup[4][4]={
    {0.0102,0.000,0.000,0.0000},
    {0.0000,0.0389,0.0000,0.000},
    {-0.0027,0.1189,0.9443,-0.0010},
    {0.0062,-0.6282,-0.0535,0.9974}
};
//static const float Bup[4]={0,0,0.1013,0.0974};
static const float Bup[4]={0,0,0.1014,0.0971};
static float xpre[4]={0.,0.,0.,0.};
static const float A[4][4] = {
		{1,0.0001,0.0012,0},
		{0,1.0001,-0.0000,0.0012},
		{0,0.0988,0.9443,-0.0011},
		{0,0.1497,-0.0536,0.9984}
};
static const float B[4] = {0.0001,0.0001,0.1013,0.0975};
static const float C[2][4] =  {
		{1,0,0,0},
		{0,1,0,0}
};

static float xdot[4] = {0.,0.,0.,0.};
static float yplant[2] = {0.,0.};
static float del[2] = {0.,0.};
static const eps[2] = {10,10};


// timer callback prototypes
void test_sequence(xTimerHandle pxTimer);
void update_value(xTimerHandle pxTimer);
void swing_up_kalman(xTimerHandle pxTimer);
void predictionTask(void *param);
float calculateKalmanControlSignal(float theta, float alpha);

void startPlantControlTimer(){
	// Initialize Encoders and reset counter
	initEncoder(ENCODER_S);
	initEncoder(ENCODER_P);

	// Write 0 to the motors
	writeDAC(0);

	// Create and start a timer with a period of 1ms
	xTimerHandle ControllerTimerHandle = xTimerCreate((const signed char *)"Controller Timer",(1/portTICK_RATE_MS),pdTRUE,(void *) NULL,swing_up_kalman);
	xTimerStart(ControllerTimerHandle, portMAX_DELAY);
}


void startPredictionTask(){
	// Start the prediction task
	xTaskCreate(predictionTask, (signed char*) "Prediction Task", configMINIMAL_STACK_SIZE,(void *) NULL, prediction_TASK_PRIORITY, ( xTaskHandle * ) NULL );
}


void predictionTask(void *param){
	for(;;){


	}
}

void swing_up_kalman(xTimerHandle pxTimer){


}


float calculateControlSignal(float theta, float alpha){

}
